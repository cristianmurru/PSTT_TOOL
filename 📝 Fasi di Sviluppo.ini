📝 Fasi di Sviluppo
Fase 1: Setup Infrastrutturale ⚡
✅ Verifica virtual environment Python 3.11
✅ Installazione dipendenze da requirements.txt
✅ Configurazione .gitignore
✅ Setup logging con Loguru
✅ Configurazione FastAPI base con Jinja2
Fase 2: Gestione Database 🗄️
✅ Implementazione DatabaseManager multi-vendor
✅ Parser del file connections.json
✅ Sistema di connessioni con pool
✅ Gestione credenziali da .env
✅ Test connettività per ogni tipo DB
Fase 3: Sistema Query 🔍
✅ Parser query SQL con parametri (define, commenti)
✅ Validazione parametri obbligatori/opzionali
✅ Esecuzione query parametrizzate
✅ Gestione risultati con paginazione
✅ Sistema filtri e ordinamento lato client
Fase 4: Frontend Web 🖥️
✅ UI principale con Tailwind CSS
✅ Selector connessioni database (highlight attiva)
✅ Form dinamico per parametri query
✅ Griglia risultati con filtri multi-colonna
✅ Barra stato (record count, tempo risposta, filtri attivi)
Fase 5: Sistema Scheduling ⏰
✅ Implementazione APScheduler per query schedulate
✅ Export automatico dei 4 report richiesti:
BOSC-NXV--001--Accessi operatori.sql
CDG-NXV--005--Dispacci-Gabbie.sql
CDG-NXV--006--Mazzetti creati.sql
CDG-NXV--008--Esiti.sql
✅ Pulizia automatica file vecchi
✅ Sistema notifiche errori
Fase 6: Export e Monitoraggio 📊
✅ Export Excel/CSV con openpyxl
✅ Compressione gzip per file grandi
✅ Sistema log strutturato
✅ Health check endpoint
✅ Metriche performance
Fase 7: Testing e Documentazione 🧪
✅ Test unitari per tutti i servizi
✅ Test integrazione database
✅ Documentazione API con OpenAPI
✅ README completo con istruzioni setup
🔧 Dettagli Tecnici Specifici
Gestione Parametri Query
Parser per define Oracle: define DATAINIZIO='17/06/2022' --Obbligatorio
Commenti per indicare obbligatorietà: --Obbligatorio / --Opzionale
Form dinamico generato in base ai parametri trovati
Connessioni Database
Oracle: oracledb (nuovo driver, non cx_oracle deprecato)
PostgreSQL: psycopg2-binary
SQL Server: pyodbc
Pool di connessioni con SQLAlchemy per performance
Scheduling Automatico
Esecuzione giornaliera delle 4 query specifiche
Naming convention: {query_name}_{YYYY-MM-DD}.xls.gz
Retention policy: pulizia file > 30 giorni
Notifiche email/log in caso di errori
⚠️ Considerazioni Importanti
Sicurezza: Credenziali in .env, mai in codice
Performance: Query con hint /*+ parallel */ mantenuti
Robustezza: Try/catch su tutte le operazioni critiche
Logging: Log strutturati per debugging efficace
UI/UX: Interfaccia professionale e responsive
📋 Deliverables
✅ Applicazione web funzionante
✅ Sistema scheduling automatico
✅ Test suite completa
✅ Documentazione completa
✅ Docker setup (opzionale)
